# -*- coding: utf-8 -*-
"""Klasteryzacja_obrazow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17-7Zwf-jDTcO5gtcRhyUb-WvwRaTC4PX
"""

# Edycja kodu w notatniku Colab (Colaboratory) na dysku Google.

!git clone https://github.com/akarpinski/Klasteryzacja_obrazow.git

# dane w repozytorium GitHub "dane_machine_learning_python"

!ls

#!ls train

!ls /content/Klasteryzacja_obrazow/train

#!ls train/architecture/

!ls /content/Klasteryzacja_obrazow/train/architecture

from tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input

from tensorflow.keras.preprocessing import image

import numpy as np

modelcv = InceptionResNetV2(include_top=False, input_shape=(224,224,3), pooling="max")

import os

def load_images_from_folder(folder, nazwy=None, foldery=None, output=None, liczba_obrazow=150):
  if nazwy is None:
    nazwy = []
  if foldery is None:
    foldery = []
  if output is None:
    output = []
  i=0
  for nazwa in os.listdir(folder):
    if i<liczba_obrazow:
      path = os.path.join(folder, nazwa)
      img = image.load_img(path, target_size=(224,224))
      x = image.img_to_array(img)
      x = np.expand_dims(x, axis=0)
      x = preprocess_input(x)
      represent = modelcv.predict(x)
      nazwy.append(path)
      foldery.append(folder)
      output.append(list(represent[0]))
      i += 1
  return nazwy, foldery, output

nazwy, foldery, output = load_images_from_folder("/content/Klasteryzacja_obrazow/test/beach")
nazwy, foldery, output = load_images_from_folder("/content/Klasteryzacja_obrazow/test/architecture/", nazwy, foldery, output)
nazwy, foldery, output = load_images_from_folder("/content/Klasteryzacja_obrazow/test/mountains/", nazwy, foldery, output)
nazwy, foldery, output = load_images_from_folder("/content/Klasteryzacja_obrazow/test/forest", nazwy, foldery, output)

len(output)

import pandas as pd

df = pd.DataFrame(np.array(output))

df["nazwy"]=nazwy
df["foldery"]=foldery

df.head()

import cv2
from google.colab.patches import cv2_imshow

def similar_pictures(indeks=0):
  nazwa = df.iloc[indeks,:]["nazwy"]
  img = cv2.imread(nazwa)
  cv2_imshow(img)

  min_dist = None
  min_dist_index = None

  for i in range(df.shape[0]):
    if i!=indeks:
      dist = np.linalg.norm(np.array(df.iloc[indeks, :-2]) - np.array(df.iloc[i, :-2]), ord=2)
      if min_dist is None:
        min_dist = dist
        min_dist_index = i
      elif min_dist>dist:
        min_dist = dist
        min_dist_index = i

  nazwa = df.iloc[min_dist_index,:]["nazwy"]
  img = cv2.imread(nazwa)
  cv2_imshow(img)

similar_pictures()

similar_pictures(100)

similar_pictures(200)

similar_pictures(300)

similar_pictures(400)

from sklearn.cluster import KMeans

#model = KMeans(n_clusters=40)
model = KMeans(n_clusters=40, n_init=10)
model.fit(df.iloc[:,:-2])
df["cluster"] = model.predict(df.iloc[:,:-2])

import matplotlib.pyplot as plt

plt.hist(df["cluster"], rwidth=0.5, bins=40, align="left")

for nazwa in list(df[df["cluster"]==2]["nazwy"])[:5]:
  img = cv2.imread(nazwa)
  cv2_imshow(img)

for nazwa in list(df[df["cluster"]==5]["nazwy"])[:5]:
  img = cv2.imread(nazwa)
  cv2_imshow(img)

for nazwa in list(df[df["cluster"]==7]["nazwy"])[:5]:
  img = cv2.imread(nazwa)
  cv2_imshow(img)

